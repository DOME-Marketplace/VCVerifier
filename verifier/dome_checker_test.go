package verifier

import (
	"net/http"
	"testing"

	"github.com/piprate/json-gold/ld"
	"github.com/trustbloc/vc-go/verifiable"
)

func TestT(t *testing.T) {
	fingerprint := "E6:0D:93:A5:62:B3:A3:34:24:3A:6E:65:42:77:CD:B6:A9:51:2A:CF:B2:A3:88:9C:8D:91:1A:69:E2:0C:2A:5D"

	var presentationOptions = []verifiable.PresentationOpt{
		verifiable.WithPresProofChecker(NewDomeJWTProofChecker(fingerprint)),
		verifiable.WithPresJSONLDDocumentLoader(ld.NewDefaultDocumentLoader(http.DefaultClient))}

	_, err := verifiable.ParsePresentation([]byte(getVPToken()),
		presentationOptions...)
	if err != nil {
		t.Fail()
	}
}

func getVPToken() string {
	return "eyJraWQiOiJkaWQ6a2V5OnpEbmFlcGJRa0xueXdYNEdIc25wVHVHUWtCSHRKNFVuR005N3RzN1h1TTI3M0wxaWgjekRuYWVwYlFrTG55d1g0R0hzbnBUdUdRa0JIdEo0VW5HTTk3dHM3WHVNMjczTDFpaCIsInR5cCI6IkpXVCIsImFsZyI6IkVTMjU2In0..0MmyF0EIGL-9DA1I1Q6qUcCFFEKX7LnXy6s7tkpWtqynzGuvm_4SyAyQFpZrGHwhVSvCBhLkb5UPGEPE_sDgJg"
}
