package verifier

import (
	"net/http"
	"testing"

	"github.com/fiware/VCVerifier/logging"
	"github.com/piprate/json-gold/ld"
	"github.com/trustbloc/vc-go/verifiable"
)

func TestT(t *testing.T) {
	type test struct {
		testName    string
		token       string
		fingerprint string
		valid       bool
	}

	tests := []test{
		{testName: "If the cert has the right signature and fingerprint, the vp should be valid.", token: getVPToken(), fingerprint: "E6:0D:93:A5:62:B3:A3:34:24:3A:6E:65:42:77:CD:B6:A9:51:2A:CF:B2:A3:88:9C:8D:91:1A:69:E2:0C:2A:5D", valid: true},
		{testName: "If the cert has the right signature and fingerprint, the vp should be valid.", token: getSecondToken(), fingerprint: "8E:70:6F:63:82:3B:15:0D:9E:8A:64:B2:30:C5:E9:4F:E2:D1:F8:48:49:10:A2:EE:16:7A:95:D0:FE:11:33:E4", valid: true},
		{testName: "If the fingerprint does not match the x5c, the vp should be invalid.", token: getVPToken(), fingerprint: "8E:70:6F:63:82:3B:15:0D:9E:8A:64:B2:30:C5:E9:4F:E2:D1:F8:48:49:10:A2:EE:16:7A:95:D0:FE:11:33:E4", valid: false},
	}

	for _, tc := range tests {

		t.Run(tc.testName, func(t *testing.T) {
			var presentationOptions = []verifiable.PresentationOpt{
				verifiable.WithPresProofChecker(NewDomeJWTProofChecker(tc.fingerprint)),
				verifiable.WithPresJSONLDDocumentLoader(ld.NewDefaultDocumentLoader(http.DefaultClient))}

			_, err := verifiable.ParsePresentation([]byte(tc.token),
				presentationOptions...)
			if err != nil && tc.valid {
				logging.Log().Warnf("Error was %s, but token was expected to be valid.", err)
				t.Fail()
			}
			if !tc.valid && err == nil {
				logging.Log().Warnf("No error, but token was expected to be invalid.")
				t.Fail()
			}
		})
	}

}

func getVPToken() string {
	return "eyJraWQiOiJkaWQ6a2V5OnpEbmFlcGJRa0xueXdYNEdIc25wVHVHUWtCSHRKNFVuR005N3RzN1h1TTI3M0wxaWgjekRuYWVwYlFrTG55d1g0R0hzbnBUdUdRa0JIdEo0VW5HTTk3dHM3WHVNMjczTDFpaCIsInR5cCI6IkpXVCIsImFsZyI6IkVTMjU2In0..0MmyF0EIGL-9DA1I1Q6qUcCFFEKX7LnXy6s7tkpWtqynzGuvm_4SyAyQFpZrGHwhVSvCBhLkb5UPGEPE_sDgJg"
}

func getSecondToken() string {
	return "eyJraWQiOiJkaWQ6a2V5OnpEbmFlUmpmUmRvdE53WlNLZ1Q5VTQ4alZkQVJNVExzcXlzZDllb05GYzI3SkR0Z0MjekRuYWVSamZSZG90TndaU0tnVDlVNDhqVmRBUk1UTHNxeXNkOWVvTkZjMjdKRHRnQyIsInR5cCI6IkpXVCIsImFsZyI6IkVTMjU2In0.eyJzdWIiOiJkaWQ6a2V5OnpEbmFlUmpmUmRvdE53WlNLZ1Q5VTQ4alZkQVJNVExzcXlzZDllb05GYzI3SkR0Z0MiLCJhdWQiOiJ2cFdlYiIsIm5iZiI6MTcxODY5NzA5NCwiaXNzIjoiZGlkOmtleTp6RG5hZVJqZlJkb3ROd1pTS2dUOVU0OGpWZEFSTVRMc3F5c2Q5ZW9ORmMyN0pEdGdDIiwidnAiOnsiQGNvbnRleHQiOlsiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiXSwiaG9sZGVyIjoiZGlkOmtleTp6RG5hZVJqZlJkb3ROd1pTS2dUOVU0OGpWZEFSTVRMc3F5c2Q5ZW9ORmMyN0pEdGdDIiwiaWQiOiJ1cm46dXVpZDo0NzI1ZThmMS04MTRjLTRjNjItYTU0Yi1kNGY5YTU4YjJhYjUiLCJ0eXBlIjpbIlZlcmlmaWFibGVQcmVzZW50YXRpb24iXSwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbU4wZVNJNkltcHpiMjRpTENKcmFXUWlPaUpOU1VoUlRVbEhNM0JKUnpCTlNVZDRUVk5KZDBsQldVUldVVkZFUkVKc1JWTlZaRXBXUlZaTlNVWlNWRWxGUmtWV2EwWlBVVEJXUlVsRlRrSkpSV041VFZKSmQwVkJXVVJXVVZGR1JYZHNRMDVFWXpCT1JHTXhUbXBCZUV0NlFYQkNaMDVXUWtGelRVbHJVa3BTTUd4VlVsVjNaMVpHVFdkUk1GWlRWa1ZzUjFOVlRrSldSV3hRVkdsQ1FsWldVa2xVTVVwS1ZrWnJlRXRFUVcxQ1owNVdRa0Z2VFVnd1VrcFNNR3hWVWxWM1oxUXdOR2RXUmtwV1ZURlNSbEpEUWxSU1ZrcFhVMVZPUmxWNVFsUlVSbFY0UlhwQlVrSm5UbFpDUVdOTlEyeGFhR0pIZUdoYVJ6bHpZVmRSZUVONlFVcENaMDVXUWtGWlZFRnJWbFJCYUZKMVFrWnJRMEp0TkhVMVEzUlRSR3ByWTFkVVNuQmtPWGxOYUdjOVBTSXNJbmcxZENOVE1qVTJJam9pYW01Q2RsazBTVGRHVVRKbGFXMVRlVTFOV0hCVUxVeFNMVVZvU2tWTFRIVkdibkZXTUZBMFVrMHRVU0lzSW5nMVl5STZXeUpOU1VsSlJFUkRRMEptVTJkQmQwbENRV2RKVldKblVscEJaMXAxVEhWUmNsVm5ORFZJUm10NVlWaG1ZMnBKV1hkRVVWbEtTMjlhU1doMlkwNUJVVVZPUWxGQmQyZGlSWGhKYWtGblFtZE9Wa0pCVFUxSFZWSktVakJzVlZKVmQyZFdSazFuVVZWU1YxRlZOVVJTVlZGblVUQkZaMUo2U1hoRmFrRlJRbWRPVmtKQlZWUkRWVWt3VG5wUk1FNTZWVEpOUkVWeVRVTnJSMEV4VlVWRGQzZHBVa1ZzU0ZOV1VrWlVRMEpWVlhsQ1JGSldTbFZUVlZwS1VUQkdWVk5WT1U5SlJVWldWa1ZvVUZWcmJGVlhWRVZ2VFVOWlIwRXhWVVZEWjNkbVVrVnNTRk5XVWtaVVEwSlFWR2xDVlZWc1ZsUldSVlpGU1VaT1JsVnNXa3BSTUZaVVNVWk9UVlpVUlZSTlFrVkhRVEZWUlVKM2QwdFdiVVp6WWtkR2EySXllSEJhUkVWTVRVRnJSMEV4VlVWQ2FFMURVbFpOZDBob1kwNU5hbEYzVG1wRk0wMUVZekJPUkUweVYyaGpUazFxWTNkT2FrVXpUVVJqTUU1RVRURlhha05DZFdwRlpVMUNkMGRCTVZWRlFYZDNWbEpGT1U1U1UwSkZVMVZrU2xaRlJrMUpSV3hGVWxVMVZWTldVbHBOVW1kM1JtZFpSRlpSVVVaRmR6bEtVa1ZPUmxWNU1ERk9hbFV5VGxSWk1VNXNRWGhFVkVGTVFtZE9Wa0pEYjAxQ1JWSlFWRlZWZUVkVVFWaENaMDVXUWtGUlRVVkZVa3BTTUd4VlVWVjNaMU5WVWtaVWJGSktWa1pyZUVoNlFXUkNaMDVXUWtGelRVWnJVbEJVVlZWblVUTktiRnBIVm5Wa1IyeG9Za05DU21NelRqRmFXRWw0UjBSQlYwSm5UbFpDUjBWTlJERmFRbFpGVmxSTVZVa3lUVVJaTUU1VWEzZE5SRVZOVFVGdlIwRXhWVVZEWjNkRVUxVTBlVTFSYzNkRFVWbEVWbEZSUjBWM1NrWlZla05EUVdsSmQwUlJXVXBMYjFwSmFIWmpUa0ZSUlVKQ1VVRkVaMmRKVUVGRVEwTkJaMjlEWjJkSlFrRkpZVTl1TnpCblMxZFdWeTl5WjNGdmIyRm1TWFZaVWpoeFdqWllaR05sZG5waVFtSlZaM053VTJKa2EySk9hbmhGU0VKb1YwZERkalpyU21wM09VTXpRVVZ5TDNSWFZXSldXSE5HVDB4TGQzbDVkV0ZDWTFCNWFtc3pWWEJZZGxZcmRtRkNRMVJ1TTB4QmVIWkhjalZOUTNCek4xWlRPR0Y2YkhGclFVMUJjV1pNYm10VVdEZHJTRTVsWmpCTFowazBVVlZVVEZkdlQyWktVVXR3V0hSVGVqSlhZbmRuWlRoS1ptOVVjVkJ0VURCRWNYaEJNRGsxTjBaMU9FNVNOVFJZTUVKRk1FcERWU3RvZDNsdWIyaENRWEZUTkU1R1YydFVhekJ0ZUdOS1VreE9Ra2RaV21NMlJqWXpWVGxvWm1kWFFYQTRUSEpQZGpSbVVWRklRMEY0UjIxNVVGZEhkek5ZV1ZSRFRXUklVMWRwWkZZMFRWVkxTV3RwTUhCelRHVkZaR0pPZUhwd1NUQXZNVVpRZUhsRGEyZFhjMGh4YUZCVUt6Z3ZhMjF0UVVobWRGRkRPRlJxUld0QlYwWjZialZQWVhaTlpXWm9kbklyVlZrd1ozcDJka1pLT0dnMWJ6QnRjbVp6ZVRseU4yaE9Wa3N4U1d0dVNGaHVaRWN6VkVFemRXTk1SRFY0ZFdoek0zUkZSRzFGTWtsVlFuWnJUelpCY1c5RmRHdFZibU4xY1ZCRmFuTTFWRWxhWTJ0dWMyOVNOREZoWW1kbVpraExiMjVGUVVWVFp6VmpjelJDZUZaR2JVbzBaM1Z4Y0hKM2NIQnZPRzA1WVdKQ1ZYWmhOQzlEUlZJM2FFNXBabGQyTkRWbmJrWnJjR1E1VWxCMFluVkxUWFYxV1ZCdFNFSnVSa1pUYkZaVWMwZzNkVzU1TmxsSVJTODVWMGsxTVRBMk9XVnVWa1ZZVDB0SmNIbEVMMVZHYXpkVlZuQkdRa1JrY0ZKSVdFTkZlRGN4ZEdOdk5reG9RbXg0VGtOUWRETm1VREJUSzNkcE1FcEtTVmt3S3pOVmVETkxUMU4wZEZkcVJYRTJjM1J6YTNONE9FVnpXRXRWY21WaGR6RXJZbXhWUTJNNE1UaFhRamQzUlZabVlrSkNZemhhZUdoUVdIRTBLMUZwVEVJNVoybElZakU1U25BM1EwVjFWMk5WYTIxMFNrRm5UVUpCUVVkcVoyZEpVRTFKU1VORGVrRk5RbWRPVmtoU1RVSkJaamhGUVdwQlFVMUNPRWRCTVZWa1NYZFJXVTFDWVVGR1NVbFViMkZOUTJ4Tk5XbEVaVUZIZEdwa1YxRllRbU5TWVRSeVRVaFJSME5EYzBkQlVWVkdRbmRGUWtKSFozZGFha0VyUW1kbmNrSm5SVVpDVVdOM1FXOVplV0ZJVWpCalJHOTJURE5DY21GVE5XdGhWMlJ3WkVkV2MyUklUWFZhV0UxMlVrVnNTRk5XVWtaVVJsSlVWVlpXUWxSRmJFZFRWVlpGVVRCR1NFMVROV3BqYmxGM1NrRlpTVXQzV1VKQ1VWVklUVUZIUjBkSGFEQmtTRUUyVEhrNWRsa3pUbmRNYlZKd1dqSnNNRnBYZURCamVUVnNZM3BEUW5kQldVUldVakJuUWtsSE5FMUpSekZOU1VkNVFtZHpja0puUlVWQldVOXVWVkZ2UkVONlEwSnZha0V2UW1kbmNrSm5SVVpDVVdORFFWSlplbUZJVWpCalNFMDJUSGs1ZDJFeWEzVmFSMnh1WVZoU2JHSklVbnBNYlZaNlRESlNkMWw1T1VWVFZXUktWa1ZXVFZaR1RtWlNSa0pFVEc1WmVVeHFSWFZqUjFKdFRVWTRSME5EYzBkQlVWVkdRbmRKUTAxR1RVMVZWVTVzWTI1U2NGcHRiR3BaVjFKMlNVZE9NVmxYZUhCYWJXeHFXVmRTZGtsSFVteEpSMXB3WTIweGFFbEhWbk5hVjA0d1kyMDVkV0ZYVG1oSlIwWXlXVmMxTmxsWFVtaEpSMUpzU1VoQ2JHTnVUblppYlVWbldtMXNlbUZYVG1oSlNGcHdZbTFPTVdKSFJtdFpWRUZRUW1kcmNrSm5SVVpDVVdOM1FWRlZSVUZuVlVGTlFqQkhRVEZWWkVwUlVWZE5RbEZIUTBOelIwRlJWVVpDZDAxRFFtZG5ja0puUlVaQ1VXTkVRa1JDUTBKblRsWklVamhGVDNwQk5VMUVaV2RPWVVGNmFHcEdiMlJJVW5kUGFUaDJXVE5LYzAxVE5YZGhNbXQxV2tkc2JtRllVbXhpU0ZKNlRHMVdla3d3VWxWVk1VWXhXVmQ0Y0ZwdGJHeGFSVTVDVW5wRmRWa3pTbk5OUWpCSFFURlZaRVJuVVZkQ1FsTjZlV2R4ZW5WblMxVkVVbGsyVjFKNlVWbDNXaXMwVEhKemFrUkJUMEpuVGxaSVVUaENRV1k0UlVKQlRVTkNjMEYzUkZGWlNrdHZXa2xvZG1OT1FWRkZUa0pSUVVSblowbENRVW8wY1RaQ1dXNXJkMGszUm1kalFrb3pSV1ozU1RGc1oxRjFXV3BNVTNwcFdHNTRZVkkzY21vclRFdENjUzlaWTJvelVGUm1lRVlyVkZFMVlsaDVNemhxTmpGR1dsbEhOa3BoT0RSdVJ6RXdjR05yUld3NFN6ZE1LelIzWkZKR1MwTlZTekJoZW5OaWFHRkNUbk5LWTNCM01uSnRPVXNyV2pod1VFeDNUU3QyZG5wekx6WnlURkJ3Ukc5MWVXaEJWRkJSWVhSSmJVeE1jbkJrUVdKbVMzZG5OMVZJTmtwbFRVNW9TV2t3V25BMFFuZ3hOR0ZHYWpaVU5XMDNUMHhhUjBwNWFqSndha1poTjNWNWVWQnljRU5aV0RSa1IwaFhORzlvV1M5UlVGWlphbFpaVFhkbk56WmlVVGwyYWs4MmQyd3paM0poU1VKNlRsaGxSVUZtU0daVlpEbG1jMkZNT1RCWGRVSlRlbXRHU1hkNk9GVklOWFJJYjNWTWFrNU9kMmc0WVVZNFNqRlJkRkZSYkdwTGIwUm9Xa3d6UjJaVWFqQlFaeTlVYzNJNFYxcFFRVkZFWkU0Mk5UUXhNRmhSYzFGbGNHOHlPVGRtUWxwSFNqWkJLelJzUWpaVE9HdDBPVzR3TVVoUFRtbEtXbE5CVkhaNVdYUTVWVGhMTmxoMFJHOHliVXhPTVV3eVJrZEJUa0pMVDJWNldHVm9kR3A0WjNGaU9YWmljbVUyVUd4eFdEWkVkWFY0Yld4WlZYcDFlbFJRTUVaek1taFZjall6UVZkMU0ydFNjVGhaZFhSbGFHSXdka0pyU0ZWMGVUSXpLMEppWXpoSU0ySmFXVmsxTW1WVlRHdFdUMFpEZFZCaFV5dHVVMXBNYm10UFVteDVaMDFKVDA4eFUzY3JRa3RoZDBSUFpsazRhemRxYURaaFIycFFXVzVUYzJST1FVWjNjRUUzWldkaWIzbFBVbEo2VFRNckszTjNkM0p3Y1RCVGRGbDNjMjgwVUhGTFVVcExZbEZWYm1reFRreFBZMVJNY2tKWGMxUjJNbTh2TUU5Sk4zVXZZazB2ZWs5NWJVcHRNRFEzWlRReldtSnFjekpVWkdwUGNYWk5XbXhQUW1GSU9XWXZVbmRaVWxWRWNFbGhVemRWTVZkTmNUUkhhbWxwTkdvMGMycDZZa3RpVlV0WU5YQnNXRkZ4YVVWVkswMVNJbDBzSW5OcFoxUWlPaUl5TURJMExUQTJMVEU0VkRBM09qUTRPakUyV2lJc0ltTnlhWFFpT2xzaWMybG5WQ0pkZlEuZXlKemRXSWlPaUprYVdRNmEyVjVPbnBFYm1GbFVtcG1VbVJ2ZEU1M1dsTkxaMVE1VlRRNGFsWmtRVkpOVkV4emNYbHpaRGxsYjA1R1l6STNTa1IwWjBNaUxDSnVZbVlpT2pFM01UZzJPVFl4TXpBc0ltbHpjeUk2SW1ScFpEcGxiSE5wT2xaQlZFVlRMVUkyTURZME5Ua3dNQ0lzSW1WNGNDSTZNVGN5TVRJNE9ERXpNQ3dpYVdGMElqb3hOekU0TmprMk1UTXdMQ0oyWXlJNmV5SkFZMjl1ZEdWNGRDSTZXeUpvZEhSd2N6b3ZMM2QzZHk1M015NXZjbWN2Ym5NdlkzSmxaR1Z1ZEdsaGJITXZkaklpTENKb2RIUndjem92TDJSdmJXVXRiV0Z5YTJWMGNHeGhZMlV1WlhVdk1qQXlNaTlqY21Wa1pXNTBhV0ZzY3k5c1pXRnlZM0psWkdWdWRHbGhiQzkyTVNKZExDSnBaQ0k2SWpNMFpqRTFOR1F5TFRReFpqZ3ROREUzTkMxaE1UWXhMV1F3WkRCbE9XTTBNems1TXlJc0luUjVjR1VpT2xzaVRFVkJVa055WldSbGJuUnBZV3hGYlhCc2IzbGxaU0lzSWxabGNtbG1hV0ZpYkdWRGNtVmtaVzUwYVdGc0lsMHNJbU55WldSbGJuUnBZV3hUZFdKcVpXTjBJanA3SW0xaGJtUmhkR1VpT25zaWFXUWlPaUl3TURFNFpUVTJOUzA1WTJNeExUUTVOVEl0T0dVNU9TMWpNV05tTkRZeE1XRXhNallpTENKc2FXWmxYM053WVc0aU9uc2laVzVrWDJSaGRHVmZkR2x0WlNJNklqSXdNalF0TURjdE1UaFVNRGM2TXpVNk16QXVOak15TWpJeE9EWTJXaUlzSW5OMFlYSjBYMlJoZEdWZmRHbHRaU0k2SWpJd01qUXRNRFl0TVRoVU1EYzZNelU2TXpBdU5qTXlNakl4T0RZMldpSjlMQ0p0WVc1a1lYUmxaU0k2ZXlKcFpDSTZJbVJwWkRwclpYazZla1J1WVdWU2FtWlNaRzkwVG5kYVUwdG5WRGxWTkRocVZtUkJVazFVVEhOeGVYTmtPV1Z2VGtaak1qZEtSSFJuUXlJc0ltVnRZV2xzSWpvaVpHMXBkSEpwTG5OcFpHOXliM1pBYVc0eUxtVnpJaXdpWm1seWMzUmZibUZ0WlNJNklrUnRhWFJ5YVNJc0lteGhjM1JmYm1GdFpTSTZJbE5wWkc5eWIzWWlMQ0p0YjJKcGJHVmZjR2h2Ym1VaU9pSXJNelFnTmpZMk5qWTJOalkxSW4wc0ltMWhibVJoZEc5eUlqcDdJbU52YlcxdmJrNWhiV1VpT2lKRVQwMUZJRVJKUjBsVVFVd2dTVVJGVGxSSlZGa2lMQ0pqYjNWdWRISjVJam9pUlZNaUxDSmxiV0ZwYkVGa1pISmxjM01pT2lKeWNtaG9RR2x1TWk1bGN5SXNJbTl5WjJGdWFYcGhkR2x2YmlJNklrbE9NaUlzSW05eVoyRnVhWHBoZEdsdmJrbGtaVzUwYVdacFpYSWlPaUpXUVZSRlV5MUNOakEyTkRVNU1EQWlMQ0p6WlhKcFlXeE9kVzFpWlhJaU9pSkpSRU5GVXkwMU5qVTJOVFkxTmxBaWZTd2ljRzkzWlhJaU9sdDdJbWxrSWpvaU1XTm1aalE1WkdFdFpqVmlPQzAwTkdWbExXRTVOVGN0WVRObVpEYzNNVFE0WVRabElpd2lkRzFtWDJGamRHbHZiaUk2SWtWNFpXTjFkR1VpTENKMGJXWmZaRzl0WVdsdUlqcHVkV3hzTENKMGJXWmZablZ1WTNScGIyNGlPaUpQYm1KdllYSmthVzVuSWl3aWRHMW1YM1I1Y0dVaU9pSkViMjFoYVc0aWZTeDdJbWxrSWpvaVltWmhZVFkwTWpFdFlqaGtPQzAwTm1JNUxXRmxPVE10TjJNME9HRmxPRFptTjJWbElpd2lkRzFtWDJGamRHbHZiaUk2V3lKRGNtVmhkR1VpTENKVmNHUmhkR1VpTENKRVpXeGxkR1VpWFN3aWRHMW1YMlJ2YldGcGJpSTZiblZzYkN3aWRHMW1YMloxYm1OMGFXOXVJam9pVUhKdlpIVmpkRTltWm1WeWFXNW5JaXdpZEcxbVgzUjVjR1VpT2lKRWIyMWhhVzRpZlN4N0ltbGtJam9pWWpNd01UUTRNbUV0WVdJNE5pMDBOelZqTFRrNU9XRXRZemxqTjJVeU5XSXhZVFkzSWl3aWRHMW1YMkZqZEdsdmJpSTZXeUpQY0dWeVlYUnZjaUlzSWtOMWMzUnZiV1Z5SWl3aVVISnZkbWxrWlhJaUxDSk5ZWEpyWlhSd2JHRmpaU0pkTENKMGJXWmZaRzl0WVdsdUlqcHVkV3hzTENKMGJXWmZablZ1WTNScGIyNGlPaUpFYjIxbFVHeGhkR1p2Y20waUxDSjBiV1pmZEhsd1pTSTZJa1J2YldGcGJpSjlYU3dpYzJsbmJtVnlJanA3SW1OdmJXMXZiazVoYldVaU9pSkVUMDFGSUVSSlIwbFVRVXdnU1VSRlRsUkpWRmtpTENKamIzVnVkSEo1SWpvaVJWTWlMQ0psYldGcGJFRmtaSEpsYzNNaU9pSnljbWhvUUdsdU1pNWxjeUlzSW05eVoyRnVhWHBoZEdsdmJpSTZJa2xPTWlJc0ltOXlaMkZ1YVhwaGRHbHZia2xrWlc1MGFXWnBaWElpT2lKV1FWUkZVeTFDTmpBMk5EVTVNREFpTENKelpYSnBZV3hPZFcxaVpYSWlPaUpKUkVORlV5MDFOalUyTlRZMU5sQWlmWDE5TENKbGVIQnBjbUYwYVc5dVJHRjBaU0k2SWpJd01qUXRNRGN0TVRoVU1EYzZNelU2TXpBdU5qTXlNakl4T0RZMldpSXNJbWx6YzNWaGJtTmxSR0YwWlNJNklqSXdNalF0TURZdE1UaFVNRGM2TXpVNk16QXVOak15TWpJeE9EWTJXaUlzSW1semMzVmxjaUk2SW1ScFpEcGxiSE5wT2xaQlZFVlRMVUkyTURZME5Ua3dNQ0lzSW5aaGJHbGtSbkp2YlNJNklqSXdNalF0TURZdE1UaFVNRGM2TXpVNk16QXVOak15TWpJeE9EWTJXaUo5TENKcWRHa2lPaUpoT1RNek5XRm1ZUzB5TnpVeExUUmpZell0T0RneFppMDJPVFZrWTJOaFlqRTRaV1FpZlEuY3JmSHlDYkFVSm4zbzJmZVlnWFVZa3lFSjU5azRCdHRTMFN3ZzRpVmxYcW9TRUs4U2Q1bnpCNXpab0xiTUdlRl9OaFlsOWdzR3U0dFZJNWdvb09oMnc5OWt6eURRbXVUZENKOWpLVS1mSnJsMzhhQWhkRDdzREI1WS1CaGJnNHZTQW1lS1JYY1BvUDkwS1JRNGh1QkpWZjVrbW1kYlBoLTBqS0YxV1c5S1U4WTZFRE40cXR6MW1QU1RrRk9CSG00OGI4ZlZRWVRhX1RUNE5NTTN6MjdWbzIyZWx5Q0JQc19QSWNSQ0JuNzc3dGRtczRrVHUzUEJ3YzRTNTNwMmE2bVVDV1N3YjQyQWNOVEtfU29iNjdRWVU4dHhOalMwSW94c19hR2VmeFM0WHdIRk1zVzd1M3F1aHZuemc3SF9ubmpNeXBlSU9QXzhtejFLSTJiWHJ5YXdSTi1zNFNQOTBzTHVza21LUHYzVlcteS1YdG9nRXdEZ0RoOXVTd1JPWkxHclZXZFd3a1NVUE1kM1VuVmhmTmhlcFBaRlVXQ0xCLUhEbEM2QnQ5ZGJudkZ4ekM2eHJybXJydEdjZDVKVUVfMEVfRmpjTGJ3YWJsNUZXQ2tqUFdISVRIWG9ZTnJTd3lILTBjbkdPUUhRZlFMZXFYN3duZlpNaTdSX1d1Y0JwUDRUd3dfS0xYLTY3d0RIcXl0Q29BLWtheUwwUy1pQWhsbFltbXpJSHJ1SnBZNlF3VDR0b0RjQ0c3U09CZXJiOGQyMUlTcEpkWFh0TkwwWXhheHhSZzlmMGN6U3RoMzFmNXlNQTJxd3VvN2tWV0FJOHhuS0NxTm1mTWQxbGQtMFdLc2wwWE1HOExfbDV0NHRManMtY0pEcHllNV9yWGJFc2RpWXV1SXpzTW91aVkiXX0sImV4cCI6MTcxODY5NzI3NCwiaWF0IjoxNzE4Njk3MDk0LCJub25jZSI6IndqN0Q4cXNvUVNpcl9CQUhFdkVLVWciLCJqdGkiOiJ1cm46dXVpZDo0NzI1ZThmMS04MTRjLTRjNjItYTU0Yi1kNGY5YTU4YjJhYjUifQ.jeWlqorzHwdpeLmGC69o98kRWgfoW6V7l6zByRFH54E9DSWomgfZNqza5s_4KPnsHwg8GjgChH4bhmpkSSH5tA"
}
