/*
 * vcverifier
 *
 * Backend component to verify credentials
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	verifier "wistefan/VCVerifier/verifier"

	"github.com/gin-gonic/gin"
)

// VerifierPageDisplayQRSIOP - Presents a qr as starting point for the auth process
func VerifierPageDisplayQRSIOP(c *gin.Context) {

	state, stateExists := c.GetQuery("state")
	if !stateExists {
		c.AbortWithStatusJSON(400, ErrorMessage{"NoStateProvided", "A state has to be provided as query-parameter."})
		// early exit
		return
	}

	callback, callbackExists := c.GetQuery("client_callback")
	if !callbackExists {
		c.AbortWithStatusJSON(400, ErrorMessage{"NoCallbackProvided", "A callback address has to be provided as query-parameter."})
		// early exit
		return
	}
	protocol := "https"
	if c.Request.TLS == nil {
		protocol = "http"
	}

	qr, err := verifier.GetVerifier().ReturnLoginQR(c.Request.Host, protocol, callback, state)
	if err != nil {
		c.AbortWithStatusJSON(500, ErrorMessage{"QrGenerationError", err.Error()})
	}
	c.HTML(http.StatusOK, "verifier_present_qr.html", gin.H{"qrcode": qr})
}

// VerifierPageLoginExpired - Presents a page when the login session is expired
func VerifierPageLoginExpired(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
